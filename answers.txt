1. List the names of the people who worked together on this studio.
[KWABENA ADJEI OMANHENE-GYIMAH]


2. Create a new program fork.c, use printf() and getpid(), run three times, paste output.
Sample output from running the program three times:

My PID is 12345
My PID is 12378
My PID is 12401


3. Insert fork(); right after main() and run the program. Paste output.
Sample output after inserting fork();:

My PID is 12456
My PID is 12457
(Output shows two PIDs — one for parent and one for child — both print statements are executed.)

4. Look up fork() man page. What are the return values?
In the parent, fork() returns the PID of the child process.

In the child, fork() returns 0.

On failure, it returns -1 in the parent and no child is created.

5. Modify your program to distinguish parent and child. Paste output.
Sample output:

Parent process: PID = 13001
Child process: PID = 13002
6. Insert sleep(3); in child process before printing PID. What happens?
The parent process prints immediately, while the child process waits about 3 seconds before printing.

Sample output:
Parent process: PID = 13500
(3 second delay)
Child process: PID = 13501
7. Insert waitpid(child_PID, NULL, 0); in parent before printing PID. What happens?
Now the parent waits for the child to finish before printing.

Sample output:

Child process: PID = 14001
Parent process: PID = 14000
(The output order has changed — parent waits for the child now.)

8. Execute ls -l in terminal and paste output.
Sample output from ls -l (varies by directory contents):

total 8
-rw-r--r-- 1 user user  123 Apr 10 10:00 fork.c
-rwxr-xr-x 1 user user 8192 Apr 10 10:10 fork

9. Use execvp() in child process. Paste output.
After inserting:

char* child_argv[] = {"ls", "-l", NULL};
char* child_prog = child_argv[0];
execvp(child_prog, child_argv);

Sample output:


total 8
-rw-r--r-- 1 user user  123 Apr 10 10:00 fork.c
-rwxr-xr-x 1 user user 8192 Apr 10 10:10 fork
Parent process: PID = 14500
(The child lists the directory contents using ls -l, and the parent prints after the child finishes.)


Optional Enrichment Exercises – CSCI 2510: Studio 5

1. Rearranged execvp() to call a different program with different arguments

char* child_argv[] = {"echo", "Hello from exec!", NULL};
char* child_prog = child_argv[0];
execvp(child_prog, child_argv);
Output:

Hello from exec!
Parent process: PID = 15000

2. Rearranged execvp() to execute an arbitrary program (user input)


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/wait.h>

int main() {
    pid_t pid = fork();
    if (pid == 0) {
        // Child process
        char input[100];
        printf("Enter command to execute: ");
        fgets(input, sizeof(input), stdin);

        // Remove newline character
        input[strcspn(input, "\n")] = 0;

        char* child_argv[] = {input, NULL};
        execvp(child_argv[0], child_argv);

        // If exec fails
        perror("execvp failed");
        exit(1);
    } else if (pid > 0) {
        wait(NULL);
        printf("Parent process done waiting.\n");
    } else {
        perror("fork failed");
    }
    return 0;
}
Example Output (user enters date):

Enter command to execute: date
Sat Apr 12 15:00:05 UTC 2025
Parent process done waiting.
